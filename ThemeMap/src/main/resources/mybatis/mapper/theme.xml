<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.ssafy.theme.theme.mapper.ThemeMapper">

	<resultMap type="themeDto" id="theme">
		<result column="theme_id" property="themeId"/>
		<result column="theme_name" property="themeName"/>
		<result column="description" property="description"/>
		<result column="editor_id" property="editorId"/>
		<result column="type" property="type"/>
		<result column="visible" property="visible"/>
		<result column="like_sum" property="likeSum"/>
	</resultMap>
	
	<resultMap type="tagDto" id="tag">
		<result column="tag_id" property="tagId"/>
		<result column="tag_name" property="tagName"/>
	</resultMap>
	
	<insert id="createTheme" parameterType="themeDto">
		insert into theme (theme_name, editor_id, description, type, visible, like_sum)
		values (#{themeName}, #{editorId}, #{description}, #{type}, #{visible}, 0)
	</insert>
	
	<select id="hotTheme" resultMap="theme">
		select theme_id, theme_name, description, editor_id, type, visible, like_sum from theme
		where visible = 1 and like_sum > 0
		order by like_sum desc limit 5
	</select>
	
	<select id="themesOfPlace" parameterType="string" resultMap="theme">
		select theme_id, theme_name, editor_id, description, type, visible, like_sum from theme
		where theme_id = (
    		select theme_id from place_in_theme
    		where place_id = #{placeId}
		)
	</select>
	
	<select id="themesOfEditor" parameterType="string" resultMap="theme">
		select theme_id, theme_name, description, editor_id, type, visible, like_sum from theme
		where editor_id = #{editorId}
	</select>
	
	<select id="themesOfLike" parameterType="string" resultMap="theme">
		select theme_id, theme_name, description, editor_id, type, visible, like_sum from theme
		where theme_id = (
			select theme_id from like_theme
    		where editor_id = #{editorId}
		);
	</select>
	
	<update id="updateTheme" parameterType="themeDto">
		update theme set theme_name = #{themeName}, description = #{description}, type = #{type}, visible = #{visible}
		where theme_id = #{themeId}
	</update>
	
	<delete id="deleteTheme" parameterType="string">
		delete from theme
		where theme_id = #{themeId}
	</delete>
	
	<select id="themesOfTag" parameterType="list" resultMap="theme">
		select theme_id, theme_name, description, editor_id, type, visible, like_sum from theme
		where visible = 1 and theme_id in (
			select theme_id from tag_in_theme
			where tag_id in
			<foreach collection="tags" item="tag" index="idx" open="(" close=")" separator=",">
				#{tag.tagId}
			</foreach>
			group by theme_id
			having count(distinct tag_id) = ${tags.size}
		)
	</select>
	
	<select id="allThemes" resultMap="theme">
		select theme_id, theme_name, description, editor_id, type, visible, like_sum from theme
		where visible = 1
		order by like_sum desc
	</select>
	
	<select id="allTags" resultMap="tag">
		select tag_id, tag_name from tag
	</select>
	
	<select id="getTheme" parameterType="string" resultMap="theme">
		select theme_id, theme_name, description, editor_id, type, visible, like_sum from theme
		where theme_id = #{themeId}
	</select>
	
</mapper>